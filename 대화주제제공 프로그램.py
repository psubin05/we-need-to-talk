# -*- coding: utf-8 -*-
"""오소기 최종.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mz_909q_MqKJBmpq2e-byqUahRuA5OCs
"""

import openai

# OpenAI API 키 설정
openai.api_key = "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"  # API 키를 여기에 입력하세요.

# GPT-4 모델 호출
response = openai.ChatCompletion.create(
    model="gpt-4",  # GPT-4 모델 지정
    messages=[
        {"role": "user", "content": "API가 잘 동작하는지 확인하는 간단한 코드예요."}
    ]
)

# 응답 출력
print(response['choices'][0]['message']['content'])

pip install openai

import requests

# API 엔드포인트 URL 설정
url = 'https://api.github.com'  # GitHub API 엔드포인트

# GET 요청 보내기
response = requests.get(url)

# HTTP 상태 코드 확인
if response.status_code == 200:
    print("API is working")
else:
    print("API is not working. Status Code:", response.status_code)

# JSON 응답 출력
print("Response JSON:", response.json())

import random
from IPython.display import clear_output, display
import ipywidgets as widgets
import openai

# OpenAI API 키 설정
openai.api_key = "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"  # OpenAI API 키를 여기에 입력하세요.

# 게임 설정
players = []
scores = {}
current_speaker = None
topic = None
votes = {}

def start_game():
    """게임 시작"""
    global players, scores
    clear_output()

    # Sandbox 환경에서 input() 대체: 위젯으로 참가자 수 입력
    def set_num_players(change):
        num_players = change['new']
        players[:] = [f"Player {i+1}" for i in range(num_players)]
        scores.clear()
        scores.update({player: 0 for player in players})
        print(f"참가자: {', '.join(players)}")
        generate_topic()

    num_players_widget = widgets.IntSlider(
        value=2,
        min=2,
        max=10,
        step=1,
        description='Players:',
    )
    display(num_players_widget)
    num_players_widget.observe(set_num_players, names='value')

def generate_topic():
    """ChatGPT를 사용하여 대화 주제 생성"""
    global topic
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",  # 최신 모델 사용
            messages=[
                {"role": "system", "content": "당신은 그룹 대화을 위한 창의적인 대화 주제를 제공하는 유용한 도우미입니다."},
                {"role": "user", "content": "여러가지 주제에 대한 이용해서 대화 주제를 한 개만 만들어줘."}
            ],
            max_tokens=100,
            temperature=0.7
        )
        topic = response['choices'][0]['message']['content'].strip()
    except Exception as e:
        topic = f"대화 주제를 가져오는 데 실패했습니다: {e}"
    clear_output()
    print(f"대화 주제: {topic}")
    show_turn_buttons()

def show_turn_buttons():
    """발언권 버튼 표시"""
    clear_output()
    print(f"대화 주제: {topic}")
    buttons = [widgets.Button(description=f"My Turn ({player})") for player in players]
    for i, button in enumerate(buttons):
        button.on_click(lambda b, idx=i: my_turn(idx))
        display(button)

def my_turn(player_index):
    """발언권 설정"""
    global current_speaker, votes
    current_speaker = players[player_index]
    votes.clear()  # 투표 초기화
    clear_output()
    print(f"{current_speaker}가 발언권을 가졌습니다!")
    show_vote_buttons()

def show_vote_buttons():
    """찬성/반대 버튼 표시"""
    print(f"{current_speaker}의 발언을 듣고 찬성/반대를 투표하세요.")
    buttons = []
    for player in players:
        if player != current_speaker:
            agree_button = widgets.Button(description=f"찬성 ({player})")
            disagree_button = widgets.Button(description=f"반대 ({player})")
            agree_button.on_click(lambda b, p=player: vote(p, "찬성"))
            disagree_button.on_click(lambda b, p=player: vote(p, "반대"))
            buttons.extend([agree_button, disagree_button])
    for button in buttons:
        display(button)

def vote(player, vote_choice):
    """투표 처리"""
    global votes
    if player in votes:
        print(f"{player}는 이미 투표했습니다.")
    else:
        votes[player] = vote_choice
    if len(votes) == len(players) - 1:  # 모든 플레이어가 투표 완료
        calculate_result()

def calculate_result():
    """투표 결과 계산"""
    global scores
    clear_output()
    agree_count = sum(1 for v in votes.values() if v == "찬성")
    disagree_count = sum(1 for v in votes.values() if v == "반대")
    if agree_count > (len(players) - 1) // 2:  # 과반수 찬성
        print(f"{current_speaker}의 발언이 찬성을 받았습니다! 점수를 획득합니다.")
        scores[current_speaker] += 1
        print(f"현재 점수: {scores}")
        if max(scores.values()) >= 10:
            declare_winner()
        else:
            generate_topic()
    elif disagree_count > (len(players) - 1) // 2:  # 과반수 반대
        print(f"{current_speaker}의 발언이 반대를 받았습니다! 다시 발언권 버튼을 표시합니다.")
        print(f"현재 점수: {scores}")
        show_turn_buttons()
    else:  # 동률일 경우 처리
        print(f"투표가 동률입니다. 발언권 버튼을 다시 표시합니다.")
        show_turn_buttons()

def declare_winner():
    """게임 승자 선언"""
    winner = max(scores, key=scores.get)
    print(f"축하합니다! {winner}가 승리했습니다!")

# 게임 시작
start_game()

